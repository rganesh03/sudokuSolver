const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const isValid = (board, row, col, num) => {
  for (let i = 0; i < 9; i++) {
    if (board[row][i] == num || board[i][col] == num) return false;
  }

  const boxRow = Math.floor(row / 3) * 3;
  const boxCol = Math.floor(col / 3) * 3;

  for (let r = boxRow; r < boxRow + 3; r++) {
    for (let c = boxCol; c < boxCol + 3; c++) {
      if (board[r][c] == num) return false;
    }
  }

  return true;
};

const visualSolve = async (board, setBoard, delay = 50) => {
  for (let row = 0; row < 9; row++) {
    for (let col = 0; col < 9; col++) {
      if (board[row][col] === '') {
        for (let num = 1; num <= 9; num++) {
          if (isValid(board, row, col, num)) {
            board[row][col] = num;
            setBoard(board.map(r => [...r]));
            await sleep(delay);

            if (await visualSolve(board, setBoard, delay)) return true;

            board[row][col] = '';
            setBoard(board.map(r => [...r]));
            await sleep(delay);
          }
        }
        return false;
      }
    }
  }
  return true;
};